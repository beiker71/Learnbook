<?xml version="1.0" encoding="utf-8" ?>
<appSettings>
  <!-- Integration Class -->
  <!-- 
    <add key="LogicIntegrationAssemblyName" value="RusticiSoftware.ScormEngine.VanillaIntegration"/>
  <add key="LogicIntegrationClassName" value="RusticiSoftware.ScormEngine.VanillaIntegration.VanillaIntegration" />
 -->
    <add key="LogicIntegrationAssemblyName" value="UMHS.ScormEngineIntegration"/>
    <add key="LogicIntegrationClassName" value="UMHS.ScormEngineIntegration.UMHSIntegration" />

    <!-- Data Persistence -->
 <!-- <add key="DataPersistanceEngine" value="sqlserver"/>
  <add key="DatabaseConnectionString" value="server=localhost;uid=sa;pwd=password;database=ScormEngine"/> -->
    <add key="DataPersistanceEngine" value="oracle"/>
    <add key="DatabaseConnectionString" value="Data Source=LMST.world;User Id=lmsown;Password=bsmrocks4test;Integrated Security=no"/>

    <!--<add key="DataPersistanceUseStoredProcsIfAvailable" value="True">-->
  <!--<add key="DataPersistanceAssemblyName" value="">-->
  <!--<add key="DataPersistancePersistClassName" value="">-->
  <!--<add key="DataPersistanceRetrieveClassName" value="">-->
  <!--<add key="DataHelperAssemblyName" value="">-->
  <!--<add key="DataHelperClassName" value="">-->
  <!--<add key="XmlPersistanceFileLocation" value="">-->

  <!-- Console Password -->
<add key="ConsolePassword" value="mlearning"/>

  <!-- URLs -->
  <add key="ScormEngineUrl" value="http://mlearningtest.med.umich.edu/ScormEngine/ScormEngineInterface"/>
  <add key="RedirectOnExitUrl" value="close.html" />
  <add key="ScormEngineScriptsUrl" value="/ScormEngine/ScormEngineInterface/scripts"/>

  <!-- Optional URLs:  If using central/remote setup or a non-default UI, see examples in comments at
       the bottom of this file -->

  <!-- The following parameter is only used as a convenience to the external LMS when generating a launch URL. 
       It is not required if the LMS has another means of getting the URL.  This is required by Console -->
  <add key="UrlToCentralLaunchPage" value="/ScormEngine/ScormEngineInterface/defaultui/launch.aspx"/>

  <!-- Upload Import Control -->
  <add key="WebPathToContentRoot" value="http://mlearningtest.med.umich.edu/" />
  <add key="FilePathToContentRoot" value="E:\RUSTICI_SCORM_COURSES" />
  <add key="FilePathToUploadedZippedPackage" value="E:\RUSTICI_SCORM_COURSES/uploads"/>
  <add key="UrlToUploadResources" value="/ScormEngine/ScormEngineInterface/scripts/EngineUtils/UploadImportControl/"/>

  <!-- Launch History Control -->
  <add key="UrlToLaunchHistoryControlResources" value="/ScormEngine/scormEngineInterface/scripts/EngineUtils/LaunchHistoryControlResources"/>

  <!--  Registration Instance and Package Versioning -->
  <add key="CreateRegistrationIfNeeded" value="True"/>
  <!--
        REGISTRATION RESTART
        1 = "never":
        2 = "when existing registration is complete and newer package version exists"
        3 = "when newer package version exists"
        4 = "when existing registration is complete"
        5 = "when existing registration is satisfied"
        6 = "when existing registration is satisfied and newer package version exists"
   -->
  <add key="WhenToRestartRegistration" value="2" />
  <add key="IsPackageVersioningEnabled" value="True"/>


  <!-- Optional SCORM Engine Features -->
  <!--These settings simply determine whether or not a warning message is displayed when unsupported SCORM 2004 / SSP content is imported...it does not enable or disable SCORM 2004 or SSP support-->
  <add key="TinCanEnabled" value="True" />
  <add key="2004Enabled" value="True" />
  <add key="SSPEnabled" value="True" />
  <add key="SSPSizeAllocation" value="1048576"/>
  <add key="UseCompressedJavascript" value="True"/>

  <!-- Optional Offline Settings -->
  <add key="ScormEngineFilesystemRoot" value="c:\inetpub\wwwroot\scormengine"/>
  <!-- Debug Settings -->
  <!-- Server side-->
  <add key="KeepAuditLog" value="True" />
  <add key="KeepDetailLog" value="True" />
  <add key="KeepSoapLog" value="True" />
  <!-- Client side (default settings for new packages)-->
  <add key="DebugControlAudit" value="True"/>
  <add key="DebugControlDetailed" value="True"/>
  <add key="DebugRteAudit" value="True"/>
  <add key="DebugRteDetailed" value="True"/>
  <add key="DebugSequencingAudit" value="True"/>
  <add key="DebugSequencingDetailed" value="True"/>
  <add key="DebugSequencingSimple" value="True"/>
  <add key="DebugLookAheadAudit" value="True"/>
  <add key="DebugLookAheadDetailed" value="False"/>
  <add key="DebugIncludeTimestamps" value="True" />

  <!-- Central / Remote Architecture-->
  <add key="UseCrossDomainWebServices" value="False" />
  <add key="WebServiceRetries" value="1" />
  <add key="WebServiceRetryInterval" value="3000" />

  <!-- ScormEngineManager Web Services -->
  <add key="UseImportWebServices" value="False" />

  <!-- Object Id Configuration-->
  <add key="UseGuidAsObjectId" value="false"/>

  <add key="Pens_Process_Sync" value="true"/>
<!-- Other connection string examples...

<add key="DataPersistanceEngine" value="mysql"/>
<add key="DatabaseConnectionString" value="Host=localhost:3006;UserName=root;Password=password;Database=ScormEngine;"/>

<add key="DataPersistanceEngine" value="oracle"/>
<add key="DatabaseConnectionString" value="Data Source=oracledb.local;User Id=lmsown;Password=gitf;Integrated Security=no"/>

<add key="DataPersistanceEngine" value="db2"/>
<add key="DatabaseConnectionString" value="Provider=IBMDADB2;Data Source=ScormEngine;UID=ScormEngineUser;PWD=password"/>

-->

<!-- Remote/Central URL Configuration

In addition to the ScormEngineUrl, the "central" SCORM Engine instance will need the following parameters explicitly defined, ex:

<add key="RemoteAiccRequestProcessorUrl" value="http://remotescorm.mycompany.com/ScormEngineInterface/ProcessAiccRequest.aspx" />
<add key="RemoteLaunchPageUrl" value="http://remotescorm.mycompany.com/ScormEngineInterface/defaultui/" />

In addition to the ScormEngineUrl, the "remote" SCORM Engine instance will need these settings ecplicitly defined:

<add key="UseWebServices" value="True" />
<add key="CentralAiccRequestProcessorUrl" value="http://centralscorm.mycompany.com/ScormEngineInterface/ProcessAiccRequest.aspx" /
<add key="CentralWebServiceUrl" value="http://centralscorm.mycompany.com/ScormEngineInterface/RuntimeDataExchange.asmx" />

-->
<add key="UseWebServices" value="True" />
<add key="CentralAiccRequestProcessorUrl" value="http://mlearningtest.med.umich.edu/ScormEngineDev/ScormEngineInterface/ProcessAiccRequest.aspx" />
 <add key="CentralWebServiceUrl" value="http://mlearningtest.med.umich.edu/ScormEngineDev/ScormEngineInterface/RuntimeDataExchange.asmx" />

<!--

If you elect to use custom ui files (deliver page, etc), you will need to define this parameter explicitly, for example:

<add key="RemoteLaunchPageUrl" value="/MyWebApplication/customui/" />

Also requires the ScormEngineScriptsUrl setting above.
-->

<!-- 
	Compatibility Section
	The folloing settings do not need to be set unless you are experiencing certain specific problems are encountered
	(described for each setting)
-->

<!-- 
Optional URL the application should redirect to when the learner refreshes the deliver page, which otherwise may result in a the content being 
re-launched. This can happen when the user deliberately refreshes the page, or uses the back button (except in IE where the back button just
shows the existing page from cache and does not reload from the server, or re-run scripts)

Re-launch is a problem if the content was not suspended, as a new attempt will be generated which will not have all the details from the prior attempt
(the prior attempt will still be shown in history).  So even though the user may have completed the initial attempt, they may appear to be incomplete.

This is an unusual problem, and frequently re-launching after a refresh is the best choice, so for now we only recommend assinging a value to this property 
if you have run into the problem described above.  The redirect page should minimally make it clear to the user how to get back into the
content.
-->
<add key="RedirectOnRefreshUrl" value="" />

<!-- 
Maximum string length (in characters) to allow persisting to the database.  Defaults to 2500000 if not set.
1) As the largest strings in the system tend to be metadata, and a package can be used without its metadata, if 
   a metadata string (raw metadata, description, etc) is longer than this value, that metadata will not be stored,
   and a parser warning will be generated.
2) Any attempt to pass a string parameter longer than this length to the SCORM engine DB layer will trigger an error.
   This is because such large values may cause an error when reading them back, or cause poor performance, so
   we reject them on write instead.
-->
<add key="DBMaxStringLength" value="2500000" />
  
  <!--
  The SupportPackagerSendKey provides a way to limit who can send support packages to RusticiSoftware.  If left blank, anyone will be able to send
  support packages.  If a key value is specified here, then for the "send to Rustici" functionality to appear, the user must append the following
  query argument to their SupportPackager url: &config=<yourkey>
  For example: http://localhost/ScormEngine/supportPackager.aspx?config=yourkey
  -->
 <add key="SupportPackagerSendKey" value=""/>


<!--
    Tin Can actors are identified in traditional LMS launches using the learner's account name
    and a home page URL for the account itself. In the case of SCORM Cloud, it is http://cloud.scorm.com/
    Fill in this value with an absolute URL to the homepage of your service.  -->

<add key="SystemHomePageUrl" value="http://mlearningtest.med.umich.edu/ScormEngine/ScormEngineInterface/" />


<!--Timespan, in seconds, that a Tin Can launch token should remain valid (default is 8 hours) -->
<add key="TinCanEnablePublicEndpoint" value="28800" />
  
  

<!--
    Allow unauthenticated TCAPI access in a special public area, under /ScormEngineInterface/TCAPI/public.
    False by default.  -->

<add key="TinCanEnablePublicEndpoint" value="true" />
    <!-- If enabled, actor merging in TinCan v0.9 is possible. This is considered dangerous and should be left disabled. -->
    <!--<add key="TinCanAllowMultipleSimultaneousActorIds" value="False" />-->
  <!-- SCORM results can be converted to TinCan statements and submitted to the ScormEngine LRS automatically  -->
   <add key="ConvertTinCanVersion" value="1.0.0" />
<add key="ConvertTinCanFromScormRealtime" value="True" />
<add key="ConvertTinCanFromScormHistorical" value="False" />

<!--
    A master TCAPI account can be optionally specified. This account allows unrestricted access, 
    and the value should be a string of the form "Username:Password". To use this unrestricted account,
    the same username and password must be sent over HTTP basic auth to the TCAPI endpoint. 
    -->
<add key="TinCanRootAccount" value="root:mlearning" />

  <!-- For tincan content to be accesible via the /content endpoint you should choose an option and implement the relevant integration method  -->
    <!--<add key="TinCanContentProtectedUseAuthTokenRedirect" value="False" />-->
    <!--<add key="TinCanContentProtectedUseBasicAuthForward" value="False" />-->
    <!--<add key="TinCanContentProtectedUseCustomProxyAuth" value="False" />-->
<!--
  A set of TCAPI accounts can be optionally specified. These should be separated by 
  newlines, and must be of the form username:password:role. The roles are as follows:
      user : typical, default permissions, allowing the account to assert any statement,
              and read only those statements they have asserted or play some role in
      read-only : allowed to read all statements and state documents, but not write anything
      write-only : allowed to write any statement or TCAPI document, but not read anything
      root : allowed to read and write any statement or TCAPI document
  In order to use the StatementViewer found in Console, an account must be specified with 
  type read-only. StatementViewer will use the first read-only account found.
  In order to use the Activity Provider management found in Console, an account must be 
  specified with type root. The AP management will use the first root account found.
  To use one of these accounts, the same username and password must be sent over HTTP 
  basic auth to the TCAPI endpoint. 
  NOTE THE SECURITY IMPLICATIONS OF PLAIN TEXT PASSWORDS IN THIS FILE. IF YOU CANNOT
  PROTECT THIS FILE, YOU MAY WISH TO SKIP THIS CONFIG ELEMENT.
    -->
  <add key="TinCanBasicAccounts" value="
        stmt-viewer : mlearning : read-only
        ap-mgmt : ap-mgmt-password : root
        " />
<!--
    When requesting authorization of restricted resources in a typical
    OAuth handshake (which is optionally part of Tin Can authorization),
    where is the authorization page?
-->
<add key="OAuthAuthorizePage" value="/ScormEngine/ScormEngineInterface/defaultui/oauth_authorize.aspx" />



  <!-- 
  Tin Can will use the file system for some functionality, including 
  attachments. The following configuration element defines the root 
  folder where Tin Can files should be stored. If not specified, the root 
  will be derived from the FilePathToContentRoot element.
  -->
  <add key="TinCanFilesPath" value="C:\inetpub\wwwroot\courses"/>
  <!-- 
  When fetching hosted Tin Can metadata, what URL patterns should we exclude? 
  List values must be valid regular expression patterns, and should be 
  separated by either commas or newlines. 
  (note: example.com and example.org are always excluded)
  -->
  <add key="TinCanHostedMetadataExcludes" value="http://example.com.*, http://example.org.*" />
  <!--
  What is the max number of records to return in a statement query? 
  Also used when no limit is specified, or if limit = 0
  Defaults to 500.
  -->
</appSettings>
